#!/bin/bash
# This is a simple post deploy hook executed after your application
# is deployed and started.  This script gets executed directly, so 
# it could be python, php, ruby, etc.

set -e

####################
# Common functions #
####################
function schema_exists() {
	if [ ! -z "${OPENSHIFT_POSTGRESQL_DB_HOST}" ]
	then
		pgsql_schema_exists
		return $?
	else
		mysql_schema_exists
		return $?
	fi
}

function create_database() {
	if [ ! -z "${OPENSHIFT_POSTGRESQL_DB_HOST}" ]
	then
		pgsql_create_database
		return $?
	else
		mysql_create_database
		return $?
	fi
}


###################
# MySQL functions #
###################
function mysql_schema_exists() {
	qry="select * from ${OPENSHIFT_APP_NAME}.users;"

	if /usr/bin/mysql -h ${OPENSHIFT_MYSQL_DB_HOST} -u ${OPENSHIFT_MYSQL_DB_USERNAME} --password=${OPENSHIFT_MYSQL_DB_PASSWORD} -e "${qry}" >/dev/null 2>&1
	then
		return 0
	else
		return 1
	fi
}

function mysql_create_database() {
	/usr/bin/mysql -h ${OPENSHIFT_MYSQL_DB_HOST} -u ${OPENSHIFT_MYSQL_DB_USERNAME} --password=${OPENSHIFT_MYSQL_DB_PASSWORD} <<MYEOF
drop database if exists ${OPENSHIFT_APP_NAME};
create database ${OPENSHIFT_APP_NAME} character set utf8;
MYEOF
	return $?
}


########################
# PostgreSQL functions #
########################
function pgsql_schema_exists() {
	qry="select * from public.users;"
	PGPASSWORD=${OPENSHIFT_POSTGRESQL_DB_PASSWORD}

	if /usr/bin/psql -h ${OPENSHIFT_POSTGRESQL_DB_HOST} -U ${OPENSHIFT_POSTGRESQL_DB_USERNAME} -d ${OPENSHIFT_APP_NAME} -c "${qry}" >/dev/null 2>&1
	then
		return 0
	else
		return 1
	fi
}

function pgsql_create_database() {
	PGPASSWORD=${OPENSHIFT_POSTGRESQL_DB_PASSWORD}

	if ! /usr/bin/psql -h ${OPENSHIFT_POSTGRESQL_DB_HOST} -U ${OPENSHIFT_POSTGRESQL_DB_USERNAME} -d ${OPENSHIFT_APP_NAME} -t -c "SELECT datname FROM pg_database WHERE datname = '${OPENSHIFT_APP_NAME}';" | egrep -v '^$' | sed 's/ //g' | egrep "^${OPENSHIFT_APP_NAME}\$"
	then
		return 1
	else
		return 0
	fi
}

if find ${OPENSHIFT_REPO_DIR}plugins -maxdepth 1 -type d | egrep -v '/plugins$' >/dev/null
then
	HAS_PLUGINS=1
else
	HAS_PLUGINS=0
fi

pushd ${OPENSHIFT_REPO_DIR} > /dev/null
bundle exec rake generate_secret_token
popd >/dev/null

if ! schema_exists
then
	echo
	echo "Schema not found! Recreating redmine schema."
	echo

	if ! create_database
	then
		echo 1>&2
		echo "Error occured while creating redmine database." 1>&2
		echo 1>&2
		exit 5
	fi
else
	echo "Schema found!"
fi

# Run db:migrate
pushd ${OPENSHIFT_REPO_DIR} > /dev/null

if [ $HAS_PLUGINS -eq 1 ]
then
	mkdir ${OPENSHIFT_DATA_DIR}plugins_$$
	mv ${OPENSHIFT_REPO_DIR}plugins/* ${OPENSHIFT_DATA_DIR}plugins_$$
fi

bundle exec rake db:migrate RAILS_ENV=production
bundle exec rake redmine:load_default_data RAILS_ENV=production REDMINE_LANG='fr'

if [ $HAS_PLUGINS -eq 1 ]
then
	mv ${OPENSHIFT_DATA_DIR}plugins_$$/* ${OPENSHIFT_REPO_DIR}plugins
	rmdir ${OPENSHIFT_DATA_DIR}plugins_$$
fi

echo "done."
popd >/dev/null


# Create and link 'files' directory
if [ ! -d ${OPENSHIFT_DATA_DIR}redmine/files ]
then
	mkdir -p ${OPENSHIFT_DATA_DIR}redmine/files
fi

ln -s ${OPENSHIFT_DATA_DIR}redmine/files ${OPENSHIFT_REPO_DIR}files

# Create and link 'plugin_assets' directory
if [ ! -d ${OPENSHIFT_DATA_DIR}redmine/plugin_assets ]
then
	mkdir -p ${OPENSHIFT_DATA_DIR}redmine/plugin_assets
fi

ln -s ${OPENSHIFT_DATA_DIR}redmine/plugin_assets ${OPENSHIFT_REPO_DIR}public/plugin_assets

# Run redmine:plugins_migrate and redmine:plugins:assets if there are some plugins in plugins directory
if [ $HAS_PLUGINS -eq 1 ]
then
	pushd ${OPENSHIFT_REPO_DIR} > /dev/null
	bundle exec rake redmine:plugins:migrate RAILS_ENV=production
	bundle exec rake redmine:plugins:assets RAILS_ENV=production
	popd >/dev/null
fi

# Create SSH key if doesn't exist
if [ ! -d ${OPENSHIFT_DATA_DIR}.ssh ]
then
	mkdir ${OPENSHIFT_DATA_DIR}.ssh
fi

if [ ! -f ${OPENSHIFT_DATA_DIR}.ssh/id_rsa ]
then
	ssh-keygen -t rsa -f ${OPENSHIFT_DATA_DIR}.ssh/id_rsa -P ""
fi

# Create git_ssh script if doesn't exist
cat <<EOF > ${OPENSHIFT_DATA_DIR}.ssh/git_ssh
#!/bin/sh
ssh -i "\${OPENSHIFT_DATA_DIR}.ssh/id_rsa" -o "StrictHostKeyChecking no" "\$@"
EOF

chmod 0750 ${OPENSHIFT_DATA_DIR}.ssh/git_ssh

# Export variable GIT_SSH in .bash_profile
if egrep '^export GIT_SSH=' ${OPENSHIFT_DATA_DIR}.bash_profile >/dev/null
then
	sed -i 's/^export GIT_SSH=.*/export GIT_SSH=${OPENSHIFT_DATA_DIR}.ssh\/git_ssh/g' ${OPENSHIFT_DATA_DIR}.bash_profile
else
	echo                                                    >> ${OPENSHIFT_DATA_DIR}.bash_profile
	echo 'export GIT_SSH=${OPENSHIFT_DATA_DIR}.ssh/git_ssh' >> ${OPENSHIFT_DATA_DIR}.bash_profile
fi

# Deployment of PlantUML
if [ -d ${OPENSHIFT_DATA_DIR}plantuml ]
then
	rm -rf ${OPENSHIFT_DATA_DIR}plantuml
fi
mv ${OPENSHIFT_REPO_DIR}extra/plantuml ${OPENSHIFT_DATA_DIR}

# Deployment of MoCoDo
if [ -d ${OPENSHIFT_DATA_DIR}mocodo ]
then
	rm -rf ${OPENSHIFT_DATA_DIR}mocodo
fi
mv ${OPENSHIFT_REPO_DIR}extra/mocodo ${OPENSHIFT_DATA_DIR}
